/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleDistributor,
  MerkleDistributorInterface,
} from "../MerkleDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token_",
        type: "address",
      },
      {
        internalType: "contract IERC1155",
        name: "erc1155_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "erc1155",
    outputs: [
      {
        internalType: "contract IERC1155",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mints",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC1155BatchReceived",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC1155Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    name: "setRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60e06040526340c10f1960e01b60c05234801561001b57600080fd5b50604051610b9c380380610b9c83398101604081905261003a9161005e565b6001600160601b0319606093841b8116608052600091909155911b1660a0526100b8565b600080600060608486031215610072578283fd5b835161007d816100a0565b602085015190935061008e816100a0565b80925050604084015190509250925092565b6001600160a01b03811681146100b557600080fd5b50565b60805160601c60a05160601c60c05160e01c60e01b610a9b6101016000396000610467015260008181610333015261043e015260008181610268015261049d0152610a9b6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063d56022d711610066578063d56022d714610129578063dab5f3401461013e578063dfc7379d14610151578063f23a6e6114610159578063fc0c546a1461016c5761009e565b806301ffc9a7146100a35780632eb4a7ab146100cc5780633e4fcb21146100e15780639e34070f146100f6578063bc197c8114610109575b600080fd5b6100b66100b13660046107c5565b610174565b6040516100c3919061091b565b60405180910390f35b6100d46101ad565b6040516100c39190610926565b6100f46100ef3660046107ed565b6101b3565b005b6100b66101043660046107ad565b6103e7565b61011c610117366004610659565b610428565b6040516100c3919061092f565b61013161043c565b6040516100c39190610944565b6100f461014c3660046107ad565b610460565b61011c610465565b61011c610167366004610710565b610489565b61013161049b565b60006001600160e01b0319821663f23a6e6160e01b14806101a557506001600160e01b0319821663bc197c8160e01b145b90505b919050565b60005481565b6000868686866040516020016101cc9493929190610858565b60405160208183030381529060405280519060200120905061022383838080602002602001604051908101604052809392919081815260200183836020028082843760009201829052505492508591506104bf9050565b6102485760405162461bcd60e51b815260040161023f90610958565b60405180910390fd5b6102518761057a565b60405163a9059cbb60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb9061029f9089908990600401610902565b602060405180830381600087803b1580156102b957600080fd5b505af11580156102cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102f19190610786565b61030d5760405162461bcd60e51b815260040161023f90610999565b6040805160008082526020820192839052637921219560e11b9092526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163f242432a9161036f9130918b919060019060248101610885565b600060405180830381600087803b15801561038957600080fd5b505af115801561039d573d6000803e3d6000fd5b505050507fd9cb1e2714d65a111c0f20f060176ad657496bd47a3de04ec7c3d4ca232112ac878787876040516103d694939291906109dc565b60405180910390a150505050505050565b6000806103f661010084610a00565b9050600061040661010085610a3b565b60009283526001602081905260409093205492901b9182169091149392505050565b63bc197c8160e01b98975050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600055565b7f000000000000000000000000000000000000000000000000000000000000000081565b63f23a6e6160e01b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b600081815b855181101561056f5760008682815181106104ef57634e487b7160e01b600052603260045260246000fd5b6020026020010151905080831161053057828160405160200161051392919061084a565b60405160208183030381529060405280519060200120925061055c565b808360405160200161054392919061084a565b6040516020818303038152906040528051906020012092505b508061056781610a14565b9150506104c4565b509092149392505050565b600061058861010083610a00565b9050600061059861010084610a3b565b600092835260016020819052604090932080549390911b9092179091555050565b80356001600160a01b03811681146101a857600080fd5b60008083601f8401126105e1578182fd5b50813567ffffffffffffffff8111156105f8578182fd5b602083019150836020808302850101111561061257600080fd5b9250929050565b60008083601f84011261062a578182fd5b50813567ffffffffffffffff811115610641578182fd5b60208301915083602082850101111561061257600080fd5b60008060008060008060008060a0898b031215610674578384fd5b61067d896105b9565b975061068b60208a016105b9565b9650604089013567ffffffffffffffff808211156106a7578586fd5b6106b38c838d016105d0565b909850965060608b01359150808211156106cb578586fd5b6106d78c838d016105d0565b909650945060808b01359150808211156106ef578384fd5b506106fc8b828c01610619565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215610728578182fd5b610731876105b9565b955061073f602088016105b9565b94506040870135935060608701359250608087013567ffffffffffffffff811115610768578283fd5b61077489828a01610619565b979a9699509497509295939492505050565b600060208284031215610797578081fd5b815180151581146107a6578182fd5b9392505050565b6000602082840312156107be578081fd5b5035919050565b6000602082840312156107d6578081fd5b81356001600160e01b0319811681146107a6578182fd5b60008060008060008060a08789031215610805578182fd5b86359550610815602088016105b9565b94506040870135935060608701359250608087013567ffffffffffffffff81111561083e578283fd5b61077489828a016105d0565b918252602082015260400190565b93845260609290921b6bffffffffffffffffffffffff191660208401526034830152605482015260740190565b600060018060a01b03808816835260208188168185015286604085015285606085015260a06080850152845191508160a0850152825b828110156108d75785810182015185820160c0015281016108bb565b828111156108e8578360c084870101525b5050601f01601f19169190910160c0019695505050505050565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b6001600160e01b031991909116815260200190565b6001600160a01b0391909116815260200190565b60208082526021908201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f666040820152601760f91b606082015260800190565b60208082526023908201527f4d65726b6c654469737472696275746f723a205472616e73666572206661696c60408201526232b21760e91b606082015260800190565b9384526001600160a01b039290921660208401526040830152606082015260800190565b600082610a0f57610a0f610a4f565b500490565b6000600019821415610a3457634e487b7160e01b81526011600452602481fd5b5060010190565b600082610a4a57610a4a610a4f565b500690565b634e487b7160e01b600052601260045260246000fdfea26469706673582212200cd73a16a0e1dac2156c3d0955351c96d4ec675e3202d1b964b12ed9a0c8e14d64736f6c63430008000033";

export class MerkleDistributor__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    token_: string,
    erc1155_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleDistributor> {
    return super.deploy(
      token_,
      erc1155_,
      merkleRoot_,
      overrides || {}
    ) as Promise<MerkleDistributor>;
  }
  getDeployTransaction(
    token_: string,
    erc1155_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      token_,
      erc1155_,
      merkleRoot_,
      overrides || {}
    );
  }
  attach(address: string): MerkleDistributor {
    return super.attach(address) as MerkleDistributor;
  }
  connect(signer: Signer): MerkleDistributor__factory {
    return super.connect(signer) as MerkleDistributor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleDistributorInterface {
    return new utils.Interface(_abi) as MerkleDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleDistributor {
    return new Contract(address, _abi, signerOrProvider) as MerkleDistributor;
  }
}
